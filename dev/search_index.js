var documenterSearchIndex = {"docs":
[{"location":"#LimitOrderBook.jl","page":"LimitOrderBook.jl","title":"LimitOrderBook.jl","text":"","category":"section"},{"location":"","page":"LimitOrderBook.jl","title":"LimitOrderBook.jl","text":"Modules = [LimitOrderBook]\nOrder   = [:module,:type, :function]\nPrivate = false","category":"page"},{"location":"#LimitOrderBook.AcctMap","page":"LimitOrderBook.jl","title":"LimitOrderBook.AcctMap","text":"AcctMap{Oid,Aid,ST,PT}\n\nCollection of open orders by account. \n\n{Oid,Aid,ST,PT} characterize the type of Order present in the AcctMap.  See documentation on Order for more information on these types.\n\nThe account map has the structure of a nested Dict. The outer key is the account id, mapping to an AVLTree of Orders keyed by order id.\n\n\n\n\n\n","category":"type"},{"location":"#LimitOrderBook.Order","page":"LimitOrderBook.jl","title":"LimitOrderBook.Order","text":"Order{Oid<:Integer,Aid<:Integer,ST<:Real,PT<:Real}\n\nType representing a limit order.\n\nAn Order{Oid<:Integer,Aid<:Integer,ST<:Real,PT<:Real} is a struct representing a Limit Order which contains\n\nAn unique order id orderid::Oid, \nA side, side::Symbol, where it is expected that side=:ASK or side=:BID to represent the side of the book the order will rest in.\nAn order size, size::ST\nA price the order is set at, price::PT and,\nOptionally, a unique account ID acctid::Union{Aid,Nothing}, which is set to nothing if the account is unknown or irrelevant.\n\nOne can create a new Order as Order{Oid,Aid,ST,PT}(orderid, side, size, price [,acctid=nothing]), where the types of  size and price will be cast to the correct types. The orderid and acctid types will not be cast in order to avoid ambiguity.\n\n\n\n\n\n","category":"type"},{"location":"#LimitOrderBook.OrderBook","page":"LimitOrderBook.jl","title":"LimitOrderBook.OrderBook","text":"OrderBook{Oid,Aid,ST,PT}\n\nAn OrderBook is a data structure containing limit orders represented as objects of type Order{Oid,Aid,ST,PT}.\n\nSee documentation on Order for more information on the parametric type Order{Oid,Aid,ST,PT}.\n\nHow to use Orderbook:\n\nInitialize an empty limit order book as OrderBook{Oid,Aid,ST,PT}()\nSubmit or cancel limit orders with submit_limit_order! and cancel_limit_order!. \nSubmit market orders with submit_market_order!\nRetrieve order book state information with print or show methods, as well as book_depth_info, best_bid_ask, volume_bid_ask, n_orders_bid_ask and get_acct\nWrite book state to csv file with write_csv.\n\n\n\n\n\n","category":"type"},{"location":"#LimitOrderBook.best_bid_ask-Tuple{OrderBook}","page":"LimitOrderBook.jl","title":"LimitOrderBook.best_bid_ask","text":"best_bid_ask(ob::OrderBook)\n\nReturn best bid/ask prices in order book as a Tuple\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.book_depth_info-Tuple{OrderBook}","page":"LimitOrderBook.jl","title":"LimitOrderBook.book_depth_info","text":"book_depth_info(ob::OrderBook; max_depth=5)\n\nReturns prices, volumes and order counts at bid and ask in ob::OrderBook  until fixed depth max_depth as a nested Dict.\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.cancel_limit_order!-Tuple{OrderBook, Order}","page":"LimitOrderBook.jl","title":"LimitOrderBook.cancel_limit_order!","text":"cancel_limit_order!(ob::OrderBook, o::Order)\n\nCancels order o::Order from LimitOrderBook.\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.cancel_limit_order!-Union{Tuple{PT}, Tuple{ST}, Tuple{Aid}, Tuple{Oid}, Tuple{OrderBook{Oid, Aid, ST, PT}, Any, Any, Symbol}} where {Oid, Aid, ST, PT}","page":"LimitOrderBook.jl","title":"LimitOrderBook.cancel_limit_order!","text":"cancel_limit_order!(ob::OrderBook, orderid, price, side [, acct_id=nothing])\n\nCancels order with matching information from OrderBook.\n\nProvide acct_id if known to guarantee correct account tracking.\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.get_acct-Union{Tuple{PT}, Tuple{ST}, Tuple{Aid}, Tuple{Oid}, Tuple{OrderBook{Oid, Aid, ST, PT}, Aid}} where {Oid, Aid, ST, PT}","page":"LimitOrderBook.jl","title":"LimitOrderBook.get_acct","text":"get_acct(ob::OrderBook{Oid,Aid,ST,PT},acct_id::Aid)\n\nReturn all open orders assigned to account acct_id\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.n_orders_bid_ask-Tuple{OrderBook}","page":"LimitOrderBook.jl","title":"LimitOrderBook.n_orders_bid_ask","text":"n_orders_bid_ask(ob::OrderBook)\n\nReturn total number of orders on each side of order book, returned as a Tuple\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.order_types-Union{Tuple{Order{Oid, Aid, ST, PT}}, Tuple{PT}, Tuple{ST}, Tuple{Aid}, Tuple{Oid}} where {Oid, Aid, ST, PT}","page":"LimitOrderBook.jl","title":"LimitOrderBook.order_types","text":"order_types(::X{Oid,Aid,ST,PT})\n\nReturn parametric types of either an Order, OrderQueue, OneSidedbook or OrderBook.\n\nExample\n\norder_types(Order{Int64,Int64,Int64,Float64}) = (Int64,Int64,Int64,Float64)\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.submit_limit_order!-Union{Tuple{PT}, Tuple{ST}, Tuple{Aid}, Tuple{Oid}, Tuple{OrderBook{Oid, Aid, ST, PT}, Oid, Real, Real, Symbol}, Tuple{OrderBook{Oid, Aid, ST, PT}, Oid, Real, Real, Symbol, Union{Nothing, Aid}}} where {Oid, Aid, ST, PT}","page":"LimitOrderBook.jl","title":"LimitOrderBook.submit_limit_order!","text":"submit_limit_order!(ob::OrderBook, orderid, price, size, side [, acct_id=nothing])\n\nEnter limit order with matching properties into ob::OrderBook. \n\nIf acct_id provided, account holdings are tracked in ob.AcctMap.\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.submit_market_order!-Union{Tuple{PT}, Tuple{ST}, Tuple{Aid}, Tuple{Oid}, Tuple{OrderBook{Oid, Aid, ST, PT}, Symbol, Any}} where {Oid, Aid, ST, PT}","page":"LimitOrderBook.jl","title":"LimitOrderBook.submit_market_order!","text":"submit_market_order!(ob::OrderBook{Oid,Aid,ST,PT},side::Symbol,mo_size)\n\nSubmit market order to OrderBook on given side (:ASK or :BID) and size mo_size.\n\nMarket orders are filled by price-time priority.\n\nReturns tuple ( ord_lst::Vector{Order}, complete_status::Symbol, left_to_trade::ST ) where\n\nord_lst is a list of limit orders that market order matched with\nleft_to_trade is the remaining size of un-filled order ( ==0 if order is complete, >0 if incomplete)\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.volume_bid_ask-Tuple{OrderBook}","page":"LimitOrderBook.jl","title":"LimitOrderBook.volume_bid_ask","text":"volume_bid_ask(ob::OrderBook)\n\nReturn total bid and ask volume from order book as a Tuple.\n\n\n\n\n\n","category":"method"},{"location":"#LimitOrderBook.write_csv-Tuple{IO, OrderBook}","page":"LimitOrderBook.jl","title":"LimitOrderBook.write_csv","text":"write_csv(\n    io::IO,\n    ob::OrderBook;\n    row_formatter = _order_to_csv,\n    header = \"TRD,ID,SIDE,SIZE,PX,ACCT\",\n    )\n\nWrite OrderBook ob to an IO stream into csv format where each row corresponds to an order The formatting for each row is given by the function argument row_formatter(::Order)::String. The csv header can be provided as an argument where setting it to nothing writes no header.\n\n\n\n\n\n","category":"method"}]
}
